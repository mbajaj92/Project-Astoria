
public class Utils {

	final public static boolean BINARY = true;

	static class Result {
		static enum KIND {
			CONST, VAR, REG
		};

		KIND kind;
		int value;
		int address;
		int regno;
	}

	/*
	 * public static void main(String args[]) {
	 * 
	 * }
	 */

	private static String format(String input, int length) {
		for (int i = input.length() + 1; i <= length; i++)
			input = "0" + input;
		return input;
	}

	private static void putF3(int code, int c, String operation) {
		
		throw new Exception("")
		String op = Integer.toBinaryString(code);
		op = format(op, 6);
		String cbits = Integer.toBinaryString(c);
		cbits = format(cbits, 26);
		if (BINARY)
			System.out.println(op + "-" + cbits);
		else
			System.out.println(operation + " " + c);
	}

	private static void putF2(int code, int a, int b, int c, String operation) {
		// Exception Check
		implementF1F2(code, a, b, c, operation);
	}

	private static void implementF1F2(int code, int a, int b, int c, String operation) {
		String op = Integer.toBinaryString(code);
		op = format(op, 6);
		String abits = Integer.toBinaryString(a);
		abits = format(abits, 5);
		String bbits = Integer.toBinaryString(b);
		bbits = format(bbits, 5);
		String cbits = Integer.toBinaryString(c);
		cbits = format(cbits, 16);
		if (BINARY)
			System.out.println(op + "-" + abits + "-" + bbits + "-" + cbits);
		else
			System.out.println(operation + " " + a + " " + b + " " + c);
	}

	private static void putF1(int code, int a, int b, int c, String operation) {
		// Exception Check
		implementF1F2(code, a, b, c, operation);
	}

	public static void put(String op, int a, int b, int c) {
		switch (op) {
		case "CHK":
			putF2(14, a, b, c, op);
			break;
		case "ASH":
			putF2(13, a, b, c, op);
			break;
		case "LSH":
			putF2(12, a, b, c, op);
			break;
		case "XOR":
			putF2(11, a, b, c, op);
			break;
		case "BIC":
			putF2(10, a, b, c, op);
			break;
		case "AND":
			putF2(9, a, b, c, op);
			break;
		case "OR":
			putF2(8, a, b, c, op);
			break;
		case "CMP":
			putF2(5, a, b, c, op);
			break;
		case "MOD":
			putF2(4, a, b, c, op);
			break;
		case "DIV":
			putF2(3, a, b, c, op);
			break;
		case "MUL":
			putF2(2, a, b, c, op);
			break;
		case "SUB":
			putF2(1, a, b, c, op);
			break;
		case "ADD":
			putF2(0, a, b, c, op);
			break;
		case "CHKI":
			putF1(30, a, b, c, op);
			break;
		case "ASHI":
			putF1(29, a, b, c, op);
			break;
		case "LSHI":
			putF1(28, a, b, c, op);
			break;
		case "XORI":
			putF1(27, a, b, c, op);
			break;
		case "BICI":
			putF1(26, a, b, c, op);
			break;
		case "ANDI":
			putF1(25, a, b, c, op);
			break;
		case "ORI":
			putF1(24, a, b, c, op);
			break;
		case "CMPI":
			putF1(21, a, b, c, op);
			break;
		case "MODI":
			putF1(20, a, b, c, op);
			break;
		case "DIVI":
			putF1(19, a, b, c, op);
			break;
		case "MULI":
			putF1(18, a, b, c, op);
			break;
		case "SUBI":
			putF1(17, a, b, c, op);
			break;
		case "ADDI":
			putF1(16, a, b, c, op);
			break;
		case "LDW":
			putF1(32, a, b, c, op);
			break;
		case "LDX":
			putF1(33, a, b, c, op);
			break;
		case "POP":
			putF1(34, a, b, c, op);
			break;
		case "STW":
			putF1(36, a, b, c, op);
			break;
		case "STX":
			putF2(37, a, b, c, op);
			break;
		case "PSH":
			putF1(38, a, b, c, op);
			break;
		case "BEQ":
			putF1(40, a, 0, c, op);
			break;
		case "BNE":
			putF1(41, a, 0, c, op);
			break;
		case "BLT":
			putF1(42, a, 0, c, op);
			break;
		case "BGE":
			putF1(43, a, 0, c, op);
			break;
		case "BLE":
			putF1(44, a, 0, c, op);
			break;
		case "BGT":
			putF1(45, a, 0, c, op);
			break;
		case "BSR":
			putF1(46, 0, 0, c, op);
			break;
		case "JSR":
			putF3(48, 0, 0, c, op);
			break;
		case "RET":
			putF2(49, 0, 0, c, op);
			break;
		case "RDD":
			putF2(50, a, 0, 0, op);
			break;
		case "WRD":
			putF2(51, 0, b, 0, op);
			break;
		case "WRH":
			putF2(51, 0, b, 0, op);
			break;
		case "WRL":
			putF1(53, 0, 0, 0, op);
			break;
		default:
			// TODO: throw an exception
		}
	}
}
